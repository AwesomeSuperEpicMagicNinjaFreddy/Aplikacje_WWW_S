## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.
##
## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore

# User-specific files
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

## Program.cs
#using Kolokwium;
#using Microsoft.EntityFrameworkCore;

#var builder = WebApplication.CreateBuilder(args);

#var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
#builder.Services.AddDbContext<MyDbContext>(options => options.UseSqlServer(connectionString));

#builder.Services.AddControllersWithViews();



#var app = builder.Build();

#app.UseStaticFiles();
#app.UseRouting();
#app.UseHttpsRedirection();
#app.MapDefaultControllerRoute();

#// app.MapGet("/", () => "Hello World!");
#app.Run();


## MyDbContext.cs

#public class MyDbContext : DbContext
#    {
#        public MyDbContext(DbContextOptions options) : base(options) { }
#        public DbSet<Article> Articles { get; set; }
#        public DbSet<Author> Authors { get; set; }
#        public DbSet<Category> Categories { get; set; }
#        public DbSet<Comment> Comments { get; set; }
#        public DbSet<Tag> Tags { get; set; }
#
#        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#        {
#            base.OnConfiguring(optionsBuilder);
#        }
#
#        protected override void OnModelCreating(ModelBuilder modelBuilder)
#        {
#           modelBuilder.Entity<Match>()
#			.HasOne(m => m.HomeTeam)
#			.WithMany(t => t.HomeMatches)
#			.HasForeignKey(m => m.HomeTeamId)
#			.OnDelete(DeleteBehavior.NoAction);
#			modelBuilder.Entity<Match>()
#			.HasOne(m => m.AwayTeam)
#			.WithMany(t => t.AwayMatches)
#			.HasForeignKey(m => m.AwayTeamId)
#			.OnDelete(DeleteBehavior.NoAction);
#        }
#    }

## Normal controller

# public class AuthorController : Controller
#     {
#         private readonly MyDbContext _context;

#         public AuthorController(MyDbContext context)
#         {
#             _context = context;
#         }

#         public IActionResult Index()
#         {
#             List<Author> authors = _context.Authors.ToList();

#             ViewBag.Title = "Authors";
#             return View(authors);
#         }

#         public IActionResult Add()
#         {
#             return View();
#         }

#         [HttpPost]
#         public IActionResult Add(Author author)
#         {
#             _context.Authors.Add(author);
#             _context.SaveChanges();

#             //return RedirectToAction("Index");
#             return View("Added", author);
#         }

#         public IActionResult Edit(int id)
#         {
#             var author = _context.Authors.FirstOrDefault(x => x.Id == id);
#             if (author == null)
#             {
#                 return View("Error");
#             }
#             return View(author);
#         }
#         [HttpPost]
#         public IActionResult Edit(Author author)
#         {
#             _context.Authors.Update(author);
#             _context.SaveChanges();

#             return RedirectToAction("Index");
#         }
#         public IActionResult Delete(int id)
#         {
#             var author = _context.Authors.FirstOrDefault(x => x.Id == id);
#             if (author != null)
#             {
#                 _context.Authors.Remove(author);

#             }
#             _context.SaveChanges();
#             return RedirectToAction("Index");
#         }
#         public IActionResult Details(int id)
#         {
#             var author = _context.Authors.FirstOrDefault(x => x.Id == id);
#             return View(author);
#         }
#     }

## BIg controller

# public class ArticleController : Controller
#     {
#         private readonly MyDbContext _context;
#         public ArticleController(MyDbContext context)
#         {
#             _context = context;
#         }

#         public IActionResult Index()
#         {
#             var articles = _context.Articles
#                 .Include(a => a.Author)
#                 .Include(a => a.Category)
#                 .Include(a => a.Tags)
#                 .ToList();
#             return View(articles);
#         }
#         public IActionResult Add()
#         {
#             ViewData["AuthorId"] = new SelectList(_context.Authors, "Id", "FirstName");
#             ViewData["CategoryId"] = new SelectList(_context.Categories, "Id", "Name");

#             ViewBag.tagsList = _context.Tags.Select(t => new SelectListItem(t.Name, t.Id.ToString())).ToList();

#             return View();
#         }
#         [HttpPost]
#         public IActionResult Add(Article article, List<int> tags)
#         {

#             var articleTags = _context.Tags.Where(t => tags.Contains(t.Id)).ToList();
#             article.Tags = articleTags;

#             _context.Add(article);
#             _context.SaveChanges();

#             article.Tags = new List<Tag>();
#             ViewData["AuthorId"] = new SelectList(_context.Authors, "Id", "FirstName", article.AuthorId);
#             ViewData["CategoryId"] = new SelectList(_context.Categories, "Id", "Name", article.CategoryId);

#             return RedirectToAction("Index");
#         }
#         public IActionResult Delete(int id)
#         {
#             var article = _context.Articles.FirstOrDefault(x => x.Id == id);

#             if (article != null)
#                 _context.Articles.Remove(article);
#             _context.SaveChanges();

#             return RedirectToAction("Index");
#         }

# public IActionResult Edit(int? id)
# 		{
# 			if (id == null)
# 			{
# 				return NotFound();
# 			}

# 			ViewBag.authorsList = new SelectList(_context.Authors, "Id", "FirstName");
# 			ViewBag.categoriesList = new SelectList(_context.Categories, "Id", "Name");
# 			ViewBag.allTags = _context.Tags.ToList();

# 			var article = _context.Articles
# 			    .Include(a => a.Tags) // Załaduj pozycje za pomocą Eager Loading
# 			    .FirstOrDefault(a => a.Id == id);

# 			return View(article);
# 		}

#         [HttpPost]
#         public IActionResult Edit(Article article, List<int> selectedTags)
#         {

#             var articleToUpdate = _context.Articles
#                 .Include(a => a.Tags)
#                 .FirstOrDefault(a => a.Id == article.Id);

#             if (articleToUpdate != null)
#             {
#                 articleToUpdate.Title = article.Title;
#                 articleToUpdate.Lead = article.Lead;
#                 articleToUpdate.Content = article.Content;
#                 articleToUpdate.CreationDate = article.CreationDate;
#                 articleToUpdate.AuthorId = article.AuthorId;
#                 articleToUpdate.CategoryId = article.CategoryId;

#                 articleToUpdate.Tags.Clear();
#                 foreach (var tag in selectedTags)
#                 {
#                     var tagToAdd = _context.Tags.Find(tag);
#                     if (tagToAdd != null)
#                     {
#                         articleToUpdate.Tags.Add(tagToAdd);
#                     }
#                 }

#                 _context.SaveChanges();
#             }

#             var articles = _context.Articles
#                 .Include(a => a.Author)
#                 .Include(a => a.Category)
#                 .Include(p => p.Tags);

#             return View("Index", articles);
#         }
# public IActionResult Show(int? id)
#         {
#             var article = _context.Articles
#                 .Include(a => a.Author)
#                 .Include(a => a.Category)
#                 .Include(a => a.Tags)
#                 .Include(a => a.Comments)
#                 .FirstOrDefault(m => m.Id == id);

#             return View(article);
#         }
#     }

## View add
# @model Kolokwium.Models.Author;

# <div class="text-center">
#     <h1>Dodaj autora</h1>
#     <form asp-controller="author" asp-action="add" method="post" class="w3-container">
#         <p>
#             <label asp-for="FirstName">Imie:</label>
#             <input asp-for="FirstName" class="w3-input w3-border" />
#         </p>
#         <p>
#             <label asp-for="LastName">Nazwisko:</label>
#             <input asp-for="LastName" class="w3-input w3-border" />
#         </p>
#         <button type="submit" class="btn btn-primary">Dodaj</button>
#     </form>
#     <a asp-action="Added" class="primary-button small">Go Back</a>
# </div>
## View edit
# @model Kolokwium.Models.Author;

# <form asp-action="Edit" asp-controller="Author" method="post">
#     @Html.HiddenFor(model => model.Id)

#     <div class="form-element">
#         <label asp-for="FirstName">Firstname:</label>
#         <input type="text" asp-for="FirstName">
#     </div>

#     <div class="form-element">
#         <label asp-for="LastName">Lastname:</label>
#         <input type="text" asp-for="LastName">
#     </div>

#     <input type="submit" value="Edit" />
# </form>
# <a asp-action="Index" class="primary-button small">Go Back</a>

## View index

# @model IEnumerable<Kolokwium.Models.Author>;

# @{
#     ViewData["Title"] = "Lista Autorow";
# }

# <h2>@ViewData["Title"]</h2>
# <td><a asp-action="Add" class="primary-button small">Add</a></td>

# <table class="table">
#     <thead>
#         <tr>
#             <th>FirstName</th>
#             <th>LastName</th>
#             <th>Edit</th>
#             <th>Delete</th>
#             <th>Details</th>

#         </tr>
#     </thead>
#     <tbody>
#         @foreach (var author in Model)
#         {
#             <tr>
#                 <td>@author.FirstName</td>
#                 <td>@author.LastName</td>
#                 <td><a asp-action="Edit" asp-route-id="@author.Id" class="primary-button small">Edit</a></td>
#                 <td><a asp-action="Delete" asp-route-id="@author.Id" class="primary-button small">Delete</a></td>
#                 <td><a asp-action="Details" asp-route-id="@author.Id" class="primary-button small">Details</a></td>

#             </tr>
#         }
#     </tbody>
# </table>


## big View Add

# @model Kolokwium.Models.Article;

# <div class="row">
#     <div class="col-md-4">
#         <form asp-action="Add">
#             <div asp-validation-summary="ModelOnly" class="text-danger"></div>
#             <div class="form-group">
#                 <label asp-for="Title" class="control-label"></label>
#                 <input asp-for="Title" class="form-control" />
#                 <span asp-validation-for="Title" class="text-danger"></span>
#             </div>
#             <div class="form-group">
#                 <label asp-for="Lead" class="control-label"></label>
#                 <input asp-for="Lead" class="form-control" />
#                 <span asp-validation-for="Lead" class="text-danger"></span>
#             </div>
#             <div class="form-group">
#                 <label asp-for="Content" class="control-label"></label>
#                 <input asp-for="Content" class="form-control" />
#                 <span asp-validation-for="Content" class="text-danger"></span>
#             </div>
#             <div class="form-group">
#                 <label asp-for="CreationDate" class="control-label"></label>
#                 <input asp-for="CreationDate" class="form-control" />
#                 <span asp-validation-for="CreationDate" class="text-danger"></span>
#             </div>
#             <div class="form-group">
#                 <label asp-for="AuthorId" class="control-label"></label>
#                 <select asp-for="AuthorId" class="form-control" asp-items="ViewBag.AuthorId"></select>
#             </div>
#             <div class="form-group">
#                 <label asp-for="CategoryId" class="control-label"></label>
#                 <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryId"></select>
#             </div>

#             @* @if (ViewBag.tagsList is List<SelectListItem> tagsList)
#             {
#             @foreach (var tag in tagsList)
#             {
#             <div>
#             <input type="checkbox" name="tags" value="@tag.Value" id="tag_@tag.Value" @(Model != null && Model.Tags
#             != null && Model.Tags.Any(p => p.Id.ToString() == tag.Value) ? "checked" : "") />
#             <label for="tag_@tag.Value">@tag.Text</label>
#             </div>
#             }
#             } *@

#             @* Wersja 2 *@
#             <div class="form-group">
#                 <label class="control-label">Tags: </label>
#                 <select name="selectedTagsIds" multiple="multiple" class="form-control"
#                     asp-items="@ViewBag.tagsList"></select>
#             </div>


#             <div class="form-group">
#                 <input type="submit" value="Create" class="btn btn-primary" />
#             </div>
#         </form>
#     </div>
# </div>


## big View Edit

# @model Kolokwium.Models.Article;

# <div class="row">
#     <div class="col-md-4">
#         <form asp-action="Add">
#             <div asp-validation-summary="ModelOnly" class="text-danger"></div>
#             <div class="form-group">
#                 <label asp-for="Title" class="control-label"></label>
#                 <input asp-for="Title" class="form-control" />
#                 <span asp-validation-for="Title" class="text-danger"></span>
#             </div>
#             <div class="form-group">
#                 <label asp-for="Lead" class="control-label"></label>
#                 <input asp-for="Lead" class="form-control" />
#                 <span asp-validation-for="Lead" class="text-danger"></span>
#             </div>
#             <div class="form-group">
#                 <label asp-for="Content" class="control-label"></label>
#                 <input asp-for="Content" class="form-control" />
#                 <span asp-validation-for="Content" class="text-danger"></span>
#             </div>
#             <div class="form-group">
#                 <label asp-for="CreationDate" class="control-label"></label>
#                 <input asp-for="CreationDate" class="form-control" />
#                 <span asp-validation-for="CreationDate" class="text-danger"></span>
#             </div>
#             <div class="form-group">
#                 <label asp-for="AuthorId" class="control-label"></label>
#                 <select asp-for="AuthorId" class="form-control" asp-items="ViewBag.AuthorId"></select>
#             </div>
#             <div class="form-group">
#                 <label asp-for="CategoryId" class="control-label"></label>
#                 <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryId"></select>
#             </div>

#             @if (ViewBag.tagsList is List<SelectListItem> tagsList)
#             {
#                 @foreach (var tag in tagsList)
#                 {
#                     <div>
#                         <input type="checkbox" name="tags" value="@tag.Value" id="tag_@tag.Value" @(Model != null && Model.Tags
#                     != null && Model.Tags.Any(p => p.Id.ToString() == tag.Value) ? "checked" : "") />
#                         <label for="tag_@tag.Value">@tag.Text</label>
#                     </div>
#                 }
#             }


#             <div class="form-group">
#                 <input type="submit" value="Create" class="btn btn-primary" />
#             </div>
#         </form>
#     </div>
# </div>


## big View Index

# @model IEnumerable<Kolokwium.Models.Article>;

# <table class="table">
#     <thead>
#         <tr>
#             <th>
#                 @Html.DisplayNameFor(model => model.Title)
#             </th>
#             <th>
#                 @Html.DisplayNameFor(model => model.Lead)
#             </th>
#             <th>
#                 @Html.DisplayNameFor(model => model.Content)
#             </th>
#             <th>
#                 @Html.DisplayNameFor(model => model.CreationDate)
#             </th>
#             <th>
#                 @Html.DisplayNameFor(model => model.Author)
#             </th>
#             <th>
#                 @Html.DisplayNameFor(model => model.Category)
#             </th>
#             <th>
#                 @Html.DisplayNameFor(model => model.Tags)
#             </th>
#             <th></th>
#         </tr>
#     </thead>
#     <tbody>
#         @foreach (var item in Model)
#         {
#             <tr>
#                 <td>
#                     @Html.DisplayFor(modelItem => item.Title)
#                 </td>
#                 <td>
#                     @Html.DisplayFor(modelItem => item.Lead)
#                 </td>
#                 <td>
#                     @Html.DisplayFor(modelItem => item.Content)
#                 </td>
#                 <td>
#                     @Html.DisplayFor(modelItem => item.CreationDate)
#                 </td>
#                 <td>
#                     @item.Author.FirstName
#                 </td>
#                 <td>
#                     @item.Category.Name
#                 </td>
#                 <td>
#                     @if (item.Tags != null && item.Tags.Any())
#                     {
#                         @string.Join(", ", item.Tags.Select(tag => tag.Name))
#                         ;
#                     }
#                     else
#                     {
#                         @:Brak tagow
#                     }
#                 </td>
#                 <td>
#                     <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
#                     <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
#                     <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
#                 </td>
#             </tr>
#         }
#     </tbody>
# </table>

## Big view Details

# @model AWWW_lab2_gr2.Models.Article;

# <div class="text-center">
# 	<h1>Szczegoly artykulu</h1>
# 	<p>@Model.Title</p>
# 	<p>@Model.Lead</p>
# 	<p>@Model.Content</p>
# 	<p>@Model.CreationDate</p>
# 	@if (@Model.Author != null)
# 	{
# 		<p>@(Model.Author.FirstName)</p>
# 	}
# 	@if (@Model.Category != null)
# 	{
# 		<p>@(Model.Category.Name)</p>
# 	}
# 	<p>
# 		@if (@Model.Tags != null)
# 		{
# 			@foreach (var tag in @Model.Tags)
# 				@(tag.Name + " ")
# 		}
# 	</p>
# 	<hr />

# 	<a class="btn btn-primary" asp-controller="comment" asp-action="add" asp-route-id="@Model.Id">Dodaj komentarz</a>
# 	<table class="table">
# 		<thead>
# 			<tr>
# 				<th>Tytul</th>
# 				<th>Tresc komentarza</th>
# 				<th></th>
# 				<th></th>
# 			</tr>
# 		</thead>
# 		<tbody>
# 			@foreach (var comment in Model.Comments)
# 			{
# 				<tr>
# 					<td>@comment.Title</td>
# 					<td>@comment.Content</td>
# 					<td><a class="btn btn-primary" asp-controller="comment" asp-action="edit" asp-route-id="@comment.Id">Edytuj komentarz</a></td>
# 					<td><a class="btn btn-primary" asp-controller="comment" asp-action="delete" asp-route-id="@comment.Id">Usun komentarz</a></td>
# 				</tr>
# 			}
# 		</tbody>
# 	</table>
# 		<br /><br />
# 	<a class="btn btn-primary" asp-controller="home" asp-action="index">Home</a>
# </div>

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/

# Visual Studio 2015/2017 cache/options directory
.vs/
# Uncomment if you have tasks that create the project's static files in wwwroot
#wwwroot/

# Visual Studio 2017 auto generated files
Generated\ Files/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUNIT
*.VisualState.xml
TestResult.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
*_i.c
*_p.c
*_i.h
*.ilk
*.meta
*.obj
*.iobj
*.pch
*.pdb
*.ipdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db
*.VC.VC.opendb

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# Visual Studio Trace Files
*.e2e

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# JustCode is a .NET coding add-in
.JustCode

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# AxoCover is a Code Coverage Tool
.axoCover/*
!.axoCover/settings.json

# Visual Studio code coverage results
*.coverage
*.coveragexml

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted
PublishScripts/

# NuGet Packages
*.nupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/[Pp]ackages/repositories.config
# NuGet v3's project.json files produces more ignorable files
*.nuget.props
*.nuget.targets

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directories and files
AppPackages/
BundleArtifacts/
Package.StoreAssociation.xml
_pkginfo.txt
*.appx

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!*.[Cc]ache/

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.jfm
*.pfx
*.publishsettings
orleans.codegen.cs

# Including strong name files can present a security risk 
# (https://github.com/github/gitignore/pull/2483#issue-259490424)
#*.snk

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
#bower_components/

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm
ServiceFabricBackup/
*.rptproj.bak

# SQL Server files
*.mdf
*.ldf
*.ndf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings
*.rptproj.rsuser

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat
node_modules/

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
*.vbw

# Visual Studio LightSwitch build output
**/*.HTMLClient/GeneratedArtifacts
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
_Pvt_Extensions

# Paket dependency manager
.paket/paket.exe
paket-files/

# FAKE - F# Make
.fake/

# JetBrains Rider
.idea/
*.sln.iml

# CodeRush
.cr/

# Python Tools for Visual Studio (PTVS)
__pycache__/
*.pyc

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio
*.tss

# Telerik's JustMock configuration file
*.jmconfig

# BizTalk build output
*.btp.cs
*.btm.cs
*.odx.cs
*.xsd.cs

# OpenCover UI analysis results
OpenCover/

# Azure Stream Analytics local run output 
ASALocalRun/

# MSBuild Binary and Structured Log
*.binlog

# NVidia Nsight GPU debugger configuration file
*.nvuser

# MFractors (Xamarin productivity tool) working folder 
.mfractor/
